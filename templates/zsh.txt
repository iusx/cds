CDS_JSON="$HOME/.cds_config.json"
CDS_MAX=20

[[ ! -f $CDS_JSON ]] && echo "{}" > $CDS_JSON

function _cds_update_json() {
  local dir="$PWD"
  local name="$(basename "$dir")"
  local old_json
  old_json=$(cat "$CDS_JSON" 2>/dev/null || echo "{}")

  if command -v jq >/dev/null 2>&1; then
    local new_json
    new_json=$(echo "$old_json" | jq --arg n "$name" --arg p "$dir" '
      if (.[$n] | type != "object") then .[$n] = {} else . end |
      .[$n].path = $p |
      .[$n].commands = (.[$n].commands // []) |
      .[$n].score = (.[$n].score // 0) |
      . |= (to_entries | reverse | .[:'"$CDS_MAX"'] | reverse | from_entries)
    ')
    echo "$new_json" > "$CDS_JSON.tmp" && mv "$CDS_JSON.tmp" "$CDS_JSON"
  fi
}

function chpwd() { _cds_update_json }

function _cds_increase_score() {
  local dir="$PWD"
  local name="$(basename "$dir")"
  local old_json
  old_json=$(cat "$CDS_JSON" 2>/dev/null || echo "{}")

  if command -v jq >/dev/null 2>&1; then
    local new_json
    new_json=$(echo "$old_json" | jq --arg n "$name" --arg p "$dir" '
      if (.[$n] | type != "object") then .[$n] = {} else . end |
      .[$n].path = $p |
      .[$n].commands = (.[$n].commands // []) |
      .[$n].score = ((.[$n].score // 0) + 1) |
      . |= (to_entries | sort_by(.value.score) | reverse | .[:'"$CDS_MAX"'] | from_entries)
    ')
    echo "$new_json" > "$CDS_JSON.tmp" && mv "$CDS_JSON.tmp" "$CDS_JSON"
  fi
}

precmd_functions+=(_cds_increase_score)

cds() {
  if [[ "$1" =~ ^(save|list|c|configure|help|version)$ ]]; then
    command cds "$@"
  elif [[ -n "$1" ]]; then

    local name="$1"
    local target_path commands
    target_path=$(jq -r --arg n "$name" '.[$n].path // empty' "$CDS_JSON")
    commands=$(jq -r --arg n "$name" '.[$n].commands // empty | join(";")' "$CDS_JSON")

    if [ -d "$target_path" ]; then
      builtin cd "$target_path"

      if [[ -n "$commands" ]]; then
        IFS=';' read -rA cmds <<< "$commands"
        for cmd in "${cmds[@]}"; do
          [[ -n "$cmd" ]] && { echo "Executing: $cmd"; [[ "$cmd" == "nix-shell" ]] && exec $cmd || eval "$cmd"; }
        done
      fi
    else
      echo "Directory '$name' not found in cds JSON"
      return 1
    fi
  else

    local result target_path commands
    result=$(jq -r 'to_entries | sort_by(.value.score) | reverse | .[0] | .value.path + "\n" + (.value.commands | join(";"))' "$CDS_JSON")
    target_path=$(echo "$result" | head -n1)
    commands=$(echo "$result" | tail -n1)

    if [ -d "$target_path" ]; then
      builtin cd "$target_path"

      if [[ -n "$commands" ]]; then
        IFS=';' read -rA cmds <<< "$commands"
        for cmd in "${cmds[@]}"; do
          [[ -n "$cmd" ]] && { echo "Executing: $cmd"; [[ "$cmd" == "nix-shell" ]] && exec $cmd || eval "$cmd"; }
        done
      fi
    else
      echo "No valid directory found"
      return 1
    fi
  fi
}
